// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v6.30.2
// source: src/grpc/proto/project.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "grpc_account";

export interface CreateProjectRequest {
  title: string;
  private: boolean;
  description: string;
  picture: string;
  ownerId: string;
  ownerTitle: string;
}

export interface CreateProjectResponse {
  id: string;
  ownerId: string;
  createdAt: string;
}

export interface GetProjectByIdRequest {
  id: string;
}

export interface GetProjectByIdResponse {
  title: string;
  description: string;
  private: boolean;
  ownerId: string;
  picture: string;
  createdAt: string;
  updatedAt: string;
}

export const GRPC_ACCOUNT_PACKAGE_NAME = "grpc_account";

export interface ProjectServiceClient {
  createProject(request: CreateProjectRequest): Observable<CreateProjectResponse>;

  getProjectById(request: GetProjectByIdRequest): Observable<GetProjectByIdResponse>;
}

export interface ProjectServiceController {
  createProject(
    request: CreateProjectRequest,
  ): Promise<CreateProjectResponse> | Observable<CreateProjectResponse> | CreateProjectResponse;

  getProjectById(
    request: GetProjectByIdRequest,
  ): Promise<GetProjectByIdResponse> | Observable<GetProjectByIdResponse> | GetProjectByIdResponse;
}

export function ProjectServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["createProject", "getProjectById"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("ProjectService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("ProjectService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const PROJECT_SERVICE_NAME = "ProjectService";
